import '../flet_backend.dart';
import '../utils/numbers.dart';
import '../utils/theme.dart';
import 'package:flutter/material.dart';

import '../flet_backend.dart';
import '../models/control.dart';
import '../utils/colors.dart';
import '../utils/misc.dart';
import '../utils/mouse.dart';
import '../utils/text.dart';
import '../widgets/error.dart';
import '../widgets/flet_store_mixin.dart';
import 'base_controls.dart';
import 'list_tile.dart';

class RadioControl extends StatefulWidget {
  final Control control;

  const RadioControl({super.key, required this.control});

  @override
  State<RadioControl> createState() => _RadioControlState();
}

class _RadioControlState extends State<RadioControl> with FletStoreMixin {
  late final FocusNode _focusNode;

  @override
  void initState() {
    super.initState();
    _focusNode = FocusNode();
    _focusNode.addListener(_onFocusChange);
  }

  void _onFocusChange() {
    widget.control
        .triggerEvent(_focusNode.hasFocus ? "focus" : "blur");
  }

  @override
  void dispose() {
    _focusNode.removeListener(_onFocusChange);
    _focusNode.dispose();
    super.dispose();
  }

  void _onChange(String ancestorId, String? value) {
    var svalue = value ?? "";
    debugPrint(svalue);
    widget.control.updateProperties({"value": value});
    widget.control.triggerEvent("change", value);
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("Radio build: ${widget.control.id}");

    return withPagePlatform((context, platform) {
      // if (adaptive == true &&
      //     (platform == TargetPlatform.iOS ||
      //         platform == TargetPlatform.macOS)) {
      //   return CupertinoRadioControl(
      //       control: widget.control,
      //       parentDisabled: widget.parentDisabled,
      //       backend: widget.backend);
      //}

      var label = widget.control.getString("label", "")!;
      var value = widget.control.getString("value", "")!;
      var labelPosition = widget.control
          .getLabelPosition("label_position", LabelPosition.right)!;
      var visualDensity = widget.control.getVisualDensity("visual_density");
      bool autofocus = widget.control.getBool("autofocus", false)!;

      var labelStyle =
          widget.control.getTextStyle("label_style", Theme.of(context));
      if (widget.control.disabled && labelStyle != null) {
        labelStyle = labelStyle.apply(color: Theme.of(context).disabledColor);
      }

      return withControlAncestor(widget.control.id, "radiogroup",
          (context, viewModel) {
        debugPrint("Radio StoreConnector build: ${widget.control.id}");

        if (viewModel.ancestor == null) {
          return const ErrorControl("Radio must be enclosed within RadioGroup");
        }

        String groupValue = viewModel.ancestor!.getString("value", "")!;
        String ancestorId = viewModel.ancestor!.id;

        var radio = Radio<String>(
            autofocus: autofocus,
            focusNode: _focusNode,
            groupValue: groupValue,
            mouseCursor:
                parseMouseCursor(widget.control.getString("mouseCursor")),
            value: value,
            activeColor: widget.control.getColor("active_color", context),
            focusColor: widget.control.getColor("focus_color", context),
            hoverColor: widget.control.getColor("hover_color", context),
            splashRadius: widget.control.getDouble("splash_radius"),
            toggleable: widget.control.getBool("toggleable", false)!,
            fillColor: widget.control
                .getWidgetStateColor("fill_color", Theme.of(context)),
            overlayColor: widget.control
                .getWidgetStateColor("overlay_color", Theme.of(context)),
            visualDensity: visualDensity,
            onChanged: !widget.control.disabled
                ? (String? value) => _onChange(ancestorId, value)
                : null);

        ListTileClicks.of(context)?.notifier.addListener(() {
          _onChange(ancestorId, value);
        });

        Widget result = radio;
        if (label != "") {
          var labelWidget = widget.control.disabled
              ? Text(label, style: labelStyle)
              : MouseRegion(
                  cursor: SystemMouseCursors.click,
                  child: Text(label, style: labelStyle));
          result = MergeSemantics(
              child: GestureDetector(
                  onTap: !widget.control.disabled
                      ? () => _onChange(ancestorId, value)
                      : null,
                  child: labelPosition == LabelPosition.right
                      ? Row(children: [radio, labelWidget])
                      : Row(children: [labelWidget, radio])));
        }

        return ConstrainedControl(control: widget.control, child: result);
      });
    });
  }
}
